using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using SAModel;
using SplitTools;
using System.Linq;
using SAModel.GC;

namespace StructExporter
{
	class Program
	{
		static void Main(string[] args)
		{
			string[] arguments = Environment.GetCommandLineArgs();
			string filename;
			bool dx = true;
			string outputfile;
			string extension;
			string dir = Environment.CurrentDirectory;
			if (args.Length == 0)
			{
				Console.WriteLine("Struct Exporter is a tool that lets you convert level, model and animation files to C structs.");
				Console.WriteLine("Usage: StructExporter <filename> [output path] [-nodx]\n");
				Console.WriteLine("Arguments: -nodx to output Basic models without SADX additions\n");
				Console.WriteLine("Supported file types: sa1lvl, sa2lvl, sa1mdl, sa2mdl, saanim\n");
				Console.WriteLine("Examples:");
				Console.WriteLine("StructExporter mylevel.sa1lvl");
				Console.WriteLine("StructExporter mylevel.sa1lvl D:\\mylevel.c");
				Console.WriteLine("StructExporter mymodel.sa1mdl D:\\mymodel.c -nodx\n");
				Console.WriteLine("You can also drag your file onto StructExporter.exe to get it converted.");
				Console.WriteLine("Press ENTER to exit");
				Console.ReadLine();
				return;
			}
			//Args list: game, filename, key, type, address, [address2/count], [language], [name]
			filename = args[0];
			outputfile = Path.GetFileNameWithoutExtension(filename) + ".c";
			if (args.Length > 1)
			{
				if (args[args.Length - 1].ToLowerInvariant() == "-nodx") dx = false;
				if (args[1].ToLowerInvariant() != "-nodx")
				{ 
					outputfile = args[1]; 
				}
			}
			byte[] file = File.ReadAllBytes(filename);
			extension = Path.GetExtension(filename);
			switch (extension.ToLowerInvariant())
			{
				case ".sa2lvl":
				case ".sa1lvl":
					LandTable land = LandTable.LoadFromFile(filename);
					List<string> labels = new List<string>() { land.Name };
					using (StreamWriter sw = File.CreateText(outputfile))
					{
						sw.Write("/* Sonic Adventure ");
						LandTableFormat fmt = land.Format;
						switch (land.Format)
						{
							case LandTableFormat.SA1:
							case LandTableFormat.SADX:
								if (dx)
								{
									sw.Write("DX");
									fmt = LandTableFormat.SADX;
								}
								else
								{
									sw.Write("1");
									fmt = LandTableFormat.SA1;
								}
								break;
							case LandTableFormat.SA2:
								sw.Write("2");
								fmt = LandTableFormat.SA2;
								break;
							case LandTableFormat.SA2B:
								sw.Write("2 Battle");
								fmt = LandTableFormat.SA2B;
								break;
						}
						sw.WriteLine(" LandTable");
						sw.WriteLine(" * ");
						sw.WriteLine(" * Generated by StructExporter");
						sw.WriteLine(" * ");
						if (!string.IsNullOrEmpty(land.Description))
						{
							sw.Write(" * Description: ");
							sw.WriteLine(land.Description);
							sw.WriteLine(" * ");
						}
						if (!string.IsNullOrEmpty(land.Author))
						{
							sw.Write(" * Author: ");
							sw.WriteLine(land.Author);
							sw.WriteLine(" * ");
						}
						sw.WriteLine(" */");
						sw.WriteLine();
						land.ToStructVariables(sw, fmt, labels, null);
					}
					break;
				case ".sa1mdl":
				case ".sa2mdl":
					ModelFile modelFile = new ModelFile(filename);
					NJS_OBJECT model = modelFile.Model;
					List<NJS_MOTION> animations = new List<NJS_MOTION>(modelFile.Animations);
					using (StreamWriter sw = File.CreateText(outputfile))
					{
						sw.Write("/* NINJA ");
						switch (modelFile.Format)
						{
							case ModelFormat.Basic:
							case ModelFormat.BasicDX:
								if (dx)
								{
									sw.Write("Basic (with Sonic Adventure DX additions)");
								}
								else
								{
									sw.Write("Basic");
								}
								break;
							case ModelFormat.Chunk:
								sw.Write("Chunk");
								break;
							case ModelFormat.GC:
								sw.Write("GC");
								break;
						}
						sw.WriteLine(" model");
						sw.WriteLine(" * ");
						sw.WriteLine(" * Generated by StructExporter");
						sw.WriteLine(" * ");
						if (modelFile != null)
						{
							if (!string.IsNullOrEmpty(modelFile.Description))
							{
								sw.Write(" * Description: ");
								sw.WriteLine(modelFile.Description);
								sw.WriteLine(" * ");
							}
							if (!string.IsNullOrEmpty(modelFile.Author))
							{
								sw.Write(" * Author: ");
								sw.WriteLine(modelFile.Author);
								sw.WriteLine(" * ");
							}
						}
						sw.WriteLine(" */");
						sw.WriteLine();
						List<string> labels_m = new List<string>() { model.Name };
						model.ToStructVariables(sw, dx, labels_m, null);
						foreach (NJS_MOTION anim in animations)
						{
							anim.ToStructVariables(sw);
						}
					}
					break;
				case ".saanim":
					NJS_MOTION animation = NJS_MOTION.Load(filename);
					using (StreamWriter sw = File.CreateText(outputfile))
					{
						sw.WriteLine("/* NINJA Motion");
						sw.WriteLine(" * ");
						sw.WriteLine(" * Generated by StructExporter");
						sw.WriteLine(" * ");
						sw.WriteLine(" */");
						sw.WriteLine();
						animation.ToStructVariables(sw);
						break;
					}
				default:
					{
						Console.WriteLine("Unsupported file extension.");
						Console.WriteLine("Supported file types: sa1lvl, sa2lvl, sa1mdl, sa2mdl, saanim\n");
						Console.WriteLine("Press ENTER to exit.");
						Console.ReadLine();
						return;
					}
			}
		}
	}
}