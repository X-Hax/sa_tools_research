using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using SplitTools;

// This tool was made to facilitate conversion of SADX decomp source files to use DLL labels.
// It replaces numeric labels with matching labels from a label list.

namespace LabelCUpdate
{
    partial class Program
    {
        static void Main(string[] args)
        {
            if (args.Length < 2)
            {
                Console.WriteLine("Usage: LabelCUpdate <C file> <labels file>.");
                Console.WriteLine("Example: LabelCUpdate bigdll.c chrmodels_orig_labels_new.txt");
            }
            List<string> checkItems = new List<string>() { "object_", "attach_", "model_", "material_", "motion_", "animation_", "action_", "texlist_", "shape_", "point_", "points_" };
            string[] lines = File.ReadAllLines(args[0]);
            Dictionary<int, string> labels = IniSerializer.Deserialize<Dictionary<int, string>>(args[1]);
            TextWriter output = File.CreateText(Path.GetFileNameWithoutExtension(args[0]) + "_out.c");
            foreach (string line in lines)
            {
                string newline = line;
                foreach (string check in checkItems)
                {
                    if (line.Contains(check))
                    {
                        int prev = 0;
                        for (int i = 0; i < 128; i++)
                        {
                            int first = line.IndexOf(check, i);
                            if (first == prev)
                                continue;
                            if (first == -1)
                                break;
                            string label = line.Substring(first, check.Length + 8);
                            if (LabelIsNumerical(label))
                            {
                                int address = GetAddressFromLabel(label);
                                if (labels.ContainsKey(address))
                                {
                                    string newlabel = GetLabelForAddress(address, labels);
                                    Console.WriteLine(label + ": " + newlabel);
                                    newline = newline.Replace(label, newlabel);
                                }
                            }
                            prev = first;
                        }
                    }
                }
                output.WriteLine(newline);
                output.Flush();
            }
            output.Close();
        }

        // Checks whether a label ends with a hex number (e.g. "object_00000000")
        private static bool LabelIsNumerical(string label)
        {
            if (label == null || label.Length < 8)
                return false;
            string number = label.Substring(label.Length - 8, 8);
            bool res = int.TryParse(number, NumberStyles.HexNumber, CultureInfo.InvariantCulture, out int test);
            return res;
        }

        // Gets the address from a label, e.g. "01020304" out of "object_01020304" as an integer
        static int GetAddressFromLabel(string label)
        {
            if (label == null || label.Length < 11) //Smallest possible autogenerated name like "uv_..."
                return 0;
            int addr = 0;
            bool succ = int.TryParse(label.Substring(label.Length - 8, 8), NumberStyles.HexNumber, null, out addr);
            if (succ == false)
                Console.WriteLine("Name {0} couldn't be parsed", label);
            return addr;
        }

        // Gets a label for address
        private static string GetLabelForAddress(int address, Dictionary<int, string> labels)
        {
            if (labels.ContainsKey(address))
                return labels[address];
            return null;
        }
    }
}